
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace full_model_nc_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 94> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 43, column 2 to column 23)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 44, column 2 to column 23)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 45, column 2 to column 23)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 46, column 2 to column 33)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 47, column 2 to column 20)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 48, column 2 to column 20)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 49, column 2 to column 19)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 50, column 2 to column 20)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 51, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 52, column 2 to column 19)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 53, column 2 to column 30)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 56, column 2 to column 59)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 57, column 2 to column 56)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 58, column 2 to column 54)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 59, column 2 to column 77)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 60, column 2 to column 62)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 61, column 2 to column 62)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 62, column 2 to column 56)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 63, column 2 to column 58)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 64, column 2 to column 57)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 67, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 67, column 12 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 67, column 2 to column 86)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 68, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 68, column 12 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 68, column 2 to column 130)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 69, column 2 to column 34)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 70, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 71, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 72, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 73, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 74, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 75, column 2 to column 23)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 76, column 2 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 77, column 2 to column 36)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 78, column 2 to column 22)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 79, column 2 to column 95)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 18, column 2 to column 9)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 19, column 2 to column 9)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 20, column 13 to column 15)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 20, column 2 to column 25)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 21, column 2 to column 26)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 22, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 22, column 12 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 22, column 2 to column 26)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 23, column 8 to column 10)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 23, column 11 to column 13)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 23, column 2 to column 26)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 26, column 8 to column 13)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 26, column 2 to column 51)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 27, column 2 to column 36)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 28, column 8 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 28, column 2 to column 23)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 29, column 8 to column 20)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 29, column 2 to column 30)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 30, column 2 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 31, column 2 to column 15)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 37, column 10 to column 24)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 38, column 10 to column 20)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 36, column 13 to line 39, column 7)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 34, column 10 to column 22)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 35, column 10 to column 19)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 33, column 28 to line 36, column 7)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 33, column 6 to line 39, column 7)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 32, column 30 to line 40, column 3)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 32, column 2 to line 40, column 3)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 47, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 48, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 49, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 50, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 51, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 51, column 12 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 53, column 13 to column 15)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 59, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 59, column 12 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 60, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 61, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 62, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 63, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 64, column 9 to column 11)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 64, column 12 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 3, column 4 to column 15)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 5, column 8 to column 26)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 4, column 4 to line 5, column 26)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 6, column 4 to column 14)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 2, column 31 to line 7, column 3)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 9, column 11 to column 18)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 9, column 4 to column 44)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 10, column 4 to column 65)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 11, column 4 to line 13, column 5)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 12, column 6 to column 68)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 14, column 4 to column 15)",
 " (in '/Users/Ryan/scripts/Topic4_TeamB/models/full_model_nc.stan', line 8, column 84 to line 15, column 3)"};

struct zip_lpmf_functor__ {
  template <bool propto__, typename T1__, typename T2__,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>>
  operator()(const std::vector<int>& c, const T1__& p, const T2__& a,
             const std::vector<int>& i0, const std::vector<int>& in0,
             std::ostream* pstream__) const;
};
struct num_zeros_functor__ {
  int
  operator()(const std::vector<int>& y, std::ostream* pstream__) const;
};

int num_zeros(const std::vector<int>& y, std::ostream* pstream__) {
    using local_scalar_t__ = double;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int nz = std::numeric_limits<int>::min();
      current_statement__ = 82;
      nz = 0;
      current_statement__ = 84;
      for (int n = 1; n <= stan::math::size(y); ++n) {
        current_statement__ = 83;
        nz = (nz +
               stan::math::logical_eq(
                 stan::model::rvalue(y, "y", stan::model::index_uni(n)), 0));
      }
      current_statement__ = 85;
      return nz;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T1__, typename T2__,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>>
  zip_lpmf(const std::vector<int>& c, const T1__& p_arg__,
           const T2__& a_arg__, const std::vector<int>& i0,
           const std::vector<int>& in0, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& p = stan::math::to_ref(p_arg__);
    const auto& a = stan::math::to_ref(a_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 87;
      stan::math::validate_non_negative_index("lilp", "size(p)",
                                              stan::math::size(p));
      Eigen::Matrix<local_scalar_t__, -1, 1> lilp =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::size(p), DUMMY_VAR__);
      current_statement__ = 88;
      stan::model::assign(lilp, stan::math::log_inv_logit(p),
        "assigning variable lilp");
      local_scalar_t__ lp = DUMMY_VAR__;
      current_statement__ = 89;
      lp = (stan::math::sum(
              stan::model::rvalue(lilp, "lilp",
                stan::model::index_multi(in0))) +
             stan::math::poisson_log_lpmf<false>(
               stan::model::rvalue(c, "c", stan::model::index_multi(in0)),
               stan::model::rvalue(a, "a", stan::model::index_multi(in0))));
      current_statement__ = 90;
      for (int sym1__ = 1; sym1__ <= stan::math::size(i0); ++sym1__) {
        {
          int i;
          current_statement__ = 90;
          i = i0[(sym1__ - 1)];
          current_statement__ = 91;
          lp = (lp +
                 stan::math::log_sum_exp(
                   stan::math::log1m_inv_logit(
                     stan::model::rvalue(p, "p", stan::model::index_uni(i))),
                   (stan::model::rvalue(lilp, "lilp",
                      stan::model::index_uni(i)) -
                     stan::math::exp(
                       stan::model::rvalue(a, "a", stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 92;
      return lp;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T1__, typename T2__,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*>
stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>>
zip_lpmf_functor__::operator()(const std::vector<int>& c, const T1__& p,
                               const T2__& a, const std::vector<int>& i0,
                               const std::vector<int>& in0,
                               std::ostream* pstream__)  const
{
  return zip_lpmf<propto__>(c, p, a, i0, in0, pstream__);
}

int
num_zeros_functor__::operator()(const std::vector<int>& y,
                                std::ostream* pstream__)  const
{
  return num_zeros(y, pstream__);
}


class full_model_nc_model final : public model_base_crtp<full_model_nc_model> {

 private:
  int NF;
  int NS;
  Eigen::Matrix<double, 1, -1> disease__;
  double global_scale_prior;
  Eigen::Matrix<double, -1, -1> phy_dists__;
  std::vector<std::vector<int>> counts;
  std::vector<int> counts_1d;
  int N_zero;
  std::vector<int> i0;
  std::vector<int> in0;
  int i0i;
  int in0i; 
  Eigen::Map<Eigen::Matrix<double, 1, -1>> disease{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> phy_dists{nullptr, 0, 0};
 
 public:
  ~full_model_nc_model() { }
  
  inline std::string model_name() const final { return "full_model_nc_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  full_model_nc_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "full_model_nc_model_namespace::full_model_nc_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 38;
      context__.validate_dims("data initialization","NF","int",
           std::vector<size_t>{});
      NF = std::numeric_limits<int>::min();
      
      
      current_statement__ = 38;
      NF = context__.vals_i("NF")[(1 - 1)];
      current_statement__ = 39;
      context__.validate_dims("data initialization","NS","int",
           std::vector<size_t>{});
      NS = std::numeric_limits<int>::min();
      
      
      current_statement__ = 39;
      NS = context__.vals_i("NS")[(1 - 1)];
      current_statement__ = 40;
      stan::math::validate_non_negative_index("disease", "NS", NS);
      current_statement__ = 41;
      context__.validate_dims("data initialization","disease","double",
           std::vector<size_t>{static_cast<size_t>(NS)});
      disease__ = 
        Eigen::Matrix<double, 1, -1>::Constant(NS,
          std::numeric_limits<double>::quiet_NaN());
      new (&disease) Eigen::Map<Eigen::Matrix<double, 1, -1>>(disease__.data(), NS);
        
      
      {
        std::vector<local_scalar_t__> disease_flat__;
        current_statement__ = 41;
        disease_flat__ = context__.vals_r("disease");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
          current_statement__ = 41;
          stan::model::assign(disease, disease_flat__[(pos__ - 1)],
            "assigning variable disease", stan::model::index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      context__.validate_dims("data initialization","global_scale_prior",
          "double", std::vector<size_t>{});
      global_scale_prior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 42;
      global_scale_prior = context__.vals_r("global_scale_prior")[(1 - 1)];
      current_statement__ = 43;
      stan::math::validate_non_negative_index("phy_dists", "NF", NF);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("phy_dists", "NF", NF);
      current_statement__ = 45;
      context__.validate_dims("data initialization","phy_dists","double",
           std::vector<size_t>{static_cast<size_t>(NF),
            static_cast<size_t>(NF)});
      phy_dists__ = 
        Eigen::Matrix<double, -1, -1>::Constant(NF, NF,
          std::numeric_limits<double>::quiet_NaN());
      new (&phy_dists) Eigen::Map<Eigen::Matrix<double, -1, -1>>(phy_dists__.data(), NF, NF);
        
      
      {
        std::vector<local_scalar_t__> phy_dists_flat__;
        current_statement__ = 45;
        phy_dists_flat__ = context__.vals_r("phy_dists");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
            current_statement__ = 45;
            stan::model::assign(phy_dists, phy_dists_flat__[(pos__ - 1)],
              "assigning variable phy_dists", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 45;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      stan::math::validate_non_negative_index("counts", "NS", NS);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("counts", "NF", NF);
      current_statement__ = 48;
      context__.validate_dims("data initialization","counts","int",
           std::vector<size_t>{static_cast<size_t>(NS),
            static_cast<size_t>(NF)});
      counts = 
        std::vector<std::vector<int>>(NS, 
          std::vector<int>(NF, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> counts_flat__;
        current_statement__ = 48;
        counts_flat__ = context__.vals_i("counts");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= NS; ++sym2__) {
            current_statement__ = 48;
            stan::model::assign(counts, counts_flat__[(pos__ - 1)],
              "assigning variable counts", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 48;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("counts_1d", "NF * NS",
                                              (NF * NS));
      current_statement__ = 50;
      counts_1d = 
        std::vector<int>((NF * NS), std::numeric_limits<int>::min());
      
      
      current_statement__ = 50;
      stan::model::assign(counts_1d, stan::math::to_array_1d(counts),
        "assigning variable counts_1d");
      current_statement__ = 51;
      N_zero = std::numeric_limits<int>::min();
      
      
      current_statement__ = 51;
      N_zero = num_zeros(counts_1d, pstream__);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("i0", "N_zero", N_zero);
      current_statement__ = 53;
      i0 = std::vector<int>(N_zero, std::numeric_limits<int>::min());
      
      
      current_statement__ = 54;
      stan::math::validate_non_negative_index("in0", "NF * NS - N_zero",
                                              ((NF * NS) - N_zero));
      current_statement__ = 55;
      in0 = 
        std::vector<int>(((NF * NS) - N_zero), 
          std::numeric_limits<int>::min());
      
      
      current_statement__ = 56;
      i0i = std::numeric_limits<int>::min();
      
      
      current_statement__ = 56;
      i0i = 1;
      current_statement__ = 57;
      in0i = std::numeric_limits<int>::min();
      
      
      current_statement__ = 57;
      in0i = 1;
      current_statement__ = 66;
      for (int c = 1; c <= stan::math::size(counts_1d); ++c) {
        current_statement__ = 64;
        if (stan::math::logical_eq(
              stan::model::rvalue(counts_1d, "counts_1d",
                stan::model::index_uni(c)), 0)) {
          current_statement__ = 61;
          stan::model::assign(i0, c,
            "assigning variable i0", stan::model::index_uni(i0i));
          current_statement__ = 62;
          i0i = (i0i + 1);
        } else {
          current_statement__ = 58;
          stan::model::assign(in0, c,
            "assigning variable in0", stan::model::index_uni(in0i));
          current_statement__ = 59;
          in0i = (in0i + 1);
        }
      }
      current_statement__ = 67;
      stan::math::validate_non_negative_index("ip_raw", "NF", NF);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("dp_raw", "NF", NF);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("i_raw", "NF", NF);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("db_raw", "NF", NF);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("res_raw", "NF", NF);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("res_raw", "NS", NS);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("size_factors", "NS", NS);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("L", "NF", NF);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("L", "NF", NF);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("prevalence_int", "NF", NF);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("prevalence_dis", "NF", NF);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("intercepts", "NF", NF);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("disease_betas", "NF", NF);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("residuals", "NF", NF);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("residuals", "NS", NS);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + NF + NF + NF + NF + (NF * NS) + 1 + NS;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "full_model_nc_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ gs_raw = DUMMY_VAR__;
      current_statement__ = 1;
      gs_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ is_raw = DUMMY_VAR__;
      current_statement__ = 2;
      is_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ ds_raw = DUMMY_VAR__;
      current_statement__ = 3;
      ds_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ prevalence_scale = DUMMY_VAR__;
      current_statement__ = 4;
      prevalence_scale = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> ip_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 5;
      ip_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<local_scalar_t__, -1, 1> dp_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 6;
      dp_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<local_scalar_t__, -1, 1> i_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 7;
      i_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<local_scalar_t__, -1, 1> db_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 8;
      db_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<local_scalar_t__, -1, -1> res_raw =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(NF, NS,
           DUMMY_VAR__);
      current_statement__ = 9;
      res_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                  NF, NS);
      local_scalar_t__ ou = DUMMY_VAR__;
      current_statement__ = 10;
      ou = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      Eigen::Matrix<local_scalar_t__, 1, -1> size_factors =
         Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(NS, DUMMY_VAR__);
      current_statement__ = 11;
      size_factors = in__.template read<
                       Eigen::Matrix<local_scalar_t__, 1, -1>>(NS);
      local_scalar_t__ global_scale = DUMMY_VAR__;
      current_statement__ = 12;
      global_scale = (global_scale_prior * gs_raw);
      local_scalar_t__ intercept_scale = DUMMY_VAR__;
      current_statement__ = 13;
      intercept_scale = (global_scale * is_raw);
      local_scalar_t__ disease_scale = DUMMY_VAR__;
      current_statement__ = 14;
      disease_scale = (global_scale * ds_raw);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(NF, NF,
           DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(L,
        stan::math::cholesky_decompose(
          stan::math::add_diag(
            stan::math::exp(
              stan::math::divide(stan::math::minus(phy_dists), ou)), 1e-9)),
        "assigning variable L");
      Eigen::Matrix<local_scalar_t__, -1, 1> prevalence_int =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(prevalence_int,
        stan::math::multiply(prevalence_scale,
          stan::math::multiply(L, ip_raw)),
        "assigning variable prevalence_int");
      Eigen::Matrix<local_scalar_t__, -1, 1> prevalence_dis =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(prevalence_dis,
        stan::math::multiply(prevalence_scale,
          stan::math::multiply(L, dp_raw)),
        "assigning variable prevalence_dis");
      Eigen::Matrix<local_scalar_t__, -1, 1> intercepts =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(intercepts,
        stan::math::multiply(intercept_scale, stan::math::multiply(L, i_raw)),
        "assigning variable intercepts");
      Eigen::Matrix<local_scalar_t__, -1, 1> disease_betas =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(disease_betas,
        stan::math::multiply(disease_scale, stan::math::multiply(L, db_raw)),
        "assigning variable disease_betas");
      Eigen::Matrix<local_scalar_t__, -1, -1> residuals =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(NF, NS,
           DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(residuals,
        stan::math::multiply(global_scale, stan::math::multiply(L, res_raw)),
        "assigning variable residuals");
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "global_scale",
                                            global_scale, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "intercept_scale",
                                            intercept_scale, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "disease_scale",
                                            disease_scale, 0);
      {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("prevalence", "NF", NF);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("prevalence", "NS", NS);
        Eigen::Matrix<local_scalar_t__, -1, -1> prevalence =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(NF, NS,
             DUMMY_VAR__);
        current_statement__ = 23;
        stan::model::assign(prevalence,
          stan::math::add(stan::math::rep_matrix(prevalence_int, NS),
            stan::math::multiply(prevalence_dis, disease)),
          "assigning variable prevalence");
        current_statement__ = 24;
        stan::math::validate_non_negative_index("latent_abundances", "NF", NF);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("latent_abundances", "NS", NS);
        Eigen::Matrix<local_scalar_t__, -1, -1> latent_abundances =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(NF, NS,
             DUMMY_VAR__);
        current_statement__ = 26;
        stan::model::assign(latent_abundances,
          stan::math::add(
            stan::math::add(
              stan::math::add(stan::math::rep_matrix(intercepts, NS),
                stan::math::rep_matrix(size_factors, NF)),
              stan::math::multiply(disease_betas, disease)), residuals),
          "assigning variable latent_abundances");
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::std_normal_lpdf<propto__>(prevalence_scale));
        current_statement__ = 28;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(ip_raw));
        current_statement__ = 29;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(dp_raw));
        current_statement__ = 30;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(gs_raw));
        current_statement__ = 31;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(is_raw));
        current_statement__ = 32;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(ds_raw));
        current_statement__ = 33;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(i_raw));
        current_statement__ = 34;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(db_raw));
        current_statement__ = 35;
        lp_accum__.add(
          stan::math::std_normal_lpdf<propto__>(
            stan::math::to_vector(res_raw)));
        current_statement__ = 36;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(ou, 1));
        current_statement__ = 37;
        lp_accum__.add(
          zip_lpmf<false>(counts_1d, stan::math::to_vector(prevalence),
            stan::math::to_vector(latent_abundances), i0, in0, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "full_model_nc_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double gs_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      gs_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double is_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      is_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double ds_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      ds_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double prevalence_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      prevalence_scale = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> ip_raw =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      ip_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<double, -1, 1> dp_raw =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      dp_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<double, -1, 1> i_raw =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      i_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<double, -1, 1> db_raw =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      db_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(NF);
      Eigen::Matrix<double, -1, -1> res_raw =
         Eigen::Matrix<double, -1, -1>::Constant(NF, NS,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      res_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                  NF, NS);
      double ou = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      ou = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      Eigen::Matrix<double, 1, -1> size_factors =
         Eigen::Matrix<double, 1, -1>::Constant(NS,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      size_factors = in__.template read<
                       Eigen::Matrix<local_scalar_t__, 1, -1>>(NS);
      double global_scale = std::numeric_limits<double>::quiet_NaN();
      double intercept_scale = std::numeric_limits<double>::quiet_NaN();
      double disease_scale = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, -1> L =
         Eigen::Matrix<double, -1, -1>::Constant(NF, NF,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> prevalence_int =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> prevalence_dis =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> intercepts =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> disease_betas =
         Eigen::Matrix<double, -1, 1>::Constant(NF,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> residuals =
         Eigen::Matrix<double, -1, -1>::Constant(NF, NS,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(gs_raw);
      out__.write(is_raw);
      out__.write(ds_raw);
      out__.write(prevalence_scale);
      out__.write(ip_raw);
      out__.write(dp_raw);
      out__.write(i_raw);
      out__.write(db_raw);
      out__.write(res_raw);
      out__.write(ou);
      out__.write(size_factors);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      global_scale = (global_scale_prior * gs_raw);
      current_statement__ = 13;
      intercept_scale = (global_scale * is_raw);
      current_statement__ = 14;
      disease_scale = (global_scale * ds_raw);
      current_statement__ = 15;
      stan::model::assign(L,
        stan::math::cholesky_decompose(
          stan::math::add_diag(
            stan::math::exp(
              stan::math::divide(stan::math::minus(phy_dists), ou)), 1e-9)),
        "assigning variable L");
      current_statement__ = 16;
      stan::model::assign(prevalence_int,
        stan::math::multiply(prevalence_scale,
          stan::math::multiply(L, ip_raw)),
        "assigning variable prevalence_int");
      current_statement__ = 17;
      stan::model::assign(prevalence_dis,
        stan::math::multiply(prevalence_scale,
          stan::math::multiply(L, dp_raw)),
        "assigning variable prevalence_dis");
      current_statement__ = 18;
      stan::model::assign(intercepts,
        stan::math::multiply(intercept_scale, stan::math::multiply(L, i_raw)),
        "assigning variable intercepts");
      current_statement__ = 19;
      stan::model::assign(disease_betas,
        stan::math::multiply(disease_scale, stan::math::multiply(L, db_raw)),
        "assigning variable disease_betas");
      current_statement__ = 20;
      stan::model::assign(residuals,
        stan::math::multiply(global_scale, stan::math::multiply(L, res_raw)),
        "assigning variable residuals");
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "global_scale",
                                            global_scale, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "intercept_scale",
                                            intercept_scale, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "disease_scale",
                                            disease_scale, 0);
      if (emit_transformed_parameters__) {
        out__.write(global_scale);
        out__.write(intercept_scale);
        out__.write(disease_scale);
        out__.write(L);
        out__.write(prevalence_int);
        out__.write(prevalence_dis);
        out__.write(intercepts);
        out__.write(disease_betas);
        out__.write(residuals);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ gs_raw = DUMMY_VAR__;
      gs_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gs_raw);
      local_scalar_t__ is_raw = DUMMY_VAR__;
      is_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, is_raw);
      local_scalar_t__ ds_raw = DUMMY_VAR__;
      ds_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ds_raw);
      local_scalar_t__ prevalence_scale = DUMMY_VAR__;
      prevalence_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, prevalence_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> ip_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        stan::model::assign(ip_raw, in__.read<local_scalar_t__>(),
          "assigning variable ip_raw", stan::model::index_uni(sym1__));
      }
      out__.write(ip_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> dp_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        stan::model::assign(dp_raw, in__.read<local_scalar_t__>(),
          "assigning variable dp_raw", stan::model::index_uni(sym1__));
      }
      out__.write(dp_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> i_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        stan::model::assign(i_raw, in__.read<local_scalar_t__>(),
          "assigning variable i_raw", stan::model::index_uni(sym1__));
      }
      out__.write(i_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> db_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(NF, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        stan::model::assign(db_raw, in__.read<local_scalar_t__>(),
          "assigning variable db_raw", stan::model::index_uni(sym1__));
      }
      out__.write(db_raw);
      Eigen::Matrix<local_scalar_t__, -1, -1> res_raw =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(NF, NS,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
          stan::model::assign(res_raw, in__.read<local_scalar_t__>(),
            "assigning variable res_raw", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
        }
      }
      out__.write(res_raw);
      local_scalar_t__ ou = DUMMY_VAR__;
      ou = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ou);
      Eigen::Matrix<local_scalar_t__, 1, -1> size_factors =
         Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(NS, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        stan::model::assign(size_factors, in__.read<local_scalar_t__>(),
          "assigning variable size_factors", stan::model::index_uni(sym1__));
      }
      out__.write(size_factors);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"gs_raw", "is_raw", "ds_raw",
      "prevalence_scale", "ip_raw", "dp_raw", "i_raw", "db_raw", "res_raw",
      "ou", "size_factors", "global_scale", "intercept_scale",
      "disease_scale", "L", "prevalence_int", "prevalence_dis", "intercepts",
      "disease_betas", "residuals"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF), static_cast<size_t>(NS)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(NS)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(NF), static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF)},
      std::vector<size_t>{static_cast<size_t>(NF), static_cast<size_t>(NS)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gs_raw");
    param_names__.emplace_back(std::string() + "is_raw");
    param_names__.emplace_back(std::string() + "ds_raw");
    param_names__.emplace_back(std::string() + "prevalence_scale");
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ip_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dp_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "i_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "db_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "res_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "ou");
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "size_factors" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "global_scale");
      param_names__.emplace_back(std::string() + "intercept_scale");
      param_names__.emplace_back(std::string() + "disease_scale");
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prevalence_int" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prevalence_dis" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "disease_betas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "residuals" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gs_raw");
    param_names__.emplace_back(std::string() + "is_raw");
    param_names__.emplace_back(std::string() + "ds_raw");
    param_names__.emplace_back(std::string() + "prevalence_scale");
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ip_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dp_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "i_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "db_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "res_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "ou");
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "size_factors" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "global_scale");
      param_names__.emplace_back(std::string() + "intercept_scale");
      param_names__.emplace_back(std::string() + "disease_scale");
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prevalence_int" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prevalence_dis" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "disease_betas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "residuals" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gs_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"is_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ds_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prevalence_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ip_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"dp_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"i_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"db_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"res_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NF) + ",\"cols\":" + std::to_string(NS) + "},\"block\":\"parameters\"},{\"name\":\"ou\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"size_factors\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NS) + "},\"block\":\"parameters\"},{\"name\":\"global_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"intercept_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"disease_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NF) + ",\"cols\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"prevalence_int\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"prevalence_dis\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"disease_betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"residuals\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NF) + ",\"cols\":" + std::to_string(NS) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gs_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"is_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ds_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prevalence_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ip_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"dp_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"i_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"db_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"res_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NF) + ",\"cols\":" + std::to_string(NS) + "},\"block\":\"parameters\"},{\"name\":\"ou\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"size_factors\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NS) + "},\"block\":\"parameters\"},{\"name\":\"global_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"intercept_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"disease_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NF) + ",\"cols\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"prevalence_int\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"prevalence_dis\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"disease_betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"residuals\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NF) + ",\"cols\":" + std::to_string(NS) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((1 + 1) + 1) + 1) + NF) + NF) + NF) + NF) + (NF * NS)) + 1) + NS);
      const size_t num_transformed = 
  ((((((((1 + 1) + 1) + (NF * NF)) + NF) + NF) + NF) + NF) + (NF * NS));
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((1 + 1) + 1) + 1) + NF) + NF) + NF) + NF) + (NF * NS)) + 1) + NS);
      const size_t num_transformed = 
  ((((((((1 + 1) + 1) + (NF * NF)) + NF) + NF) + NF) + NF) + (NF * NS));
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 11> names__{"gs_raw", "is_raw",
      "ds_raw", "prevalence_scale", "ip_raw", "dp_raw", "i_raw", "db_raw",
      "res_raw", "ou", "size_factors"};
      const std::array<Eigen::Index, 11> constrain_param_sizes__{1, 1, 
       1, 1, NF, NF, NF, NF, (NF * NS), 1, NS};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = full_model_nc_model_namespace::full_model_nc_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return full_model_nc_model_namespace::profiles__;
}

#endif


